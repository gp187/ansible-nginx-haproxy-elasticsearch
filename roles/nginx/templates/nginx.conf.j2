#{{ ansible_managed }}
user {{ nginx_user }}  {{ nginx_group }};

worker_processes  {{ nginx_worker_processes }};
worker_rlimit_core  {{  worker_rlimit_core  }};
working_directory {{  working_directory  }};

{% if nginx_pid_file %}
pid {{ nginx_pid_file }};
{% endif %}

worker_rlimit_nofile {{ nginx_worker_rlimit_nofile }};

events {
{% for param in nginx_events_params %}
        {{ param }};
{% endfor %}
}


http {
{% for param in nginx_http_params %}
        {{ param }};
{% endfor %}
        # Load Balance
        upstream backend {
{% for server in nginx_servers %}
        server {{ server }} weight=5;
{% endfor %}
        }

        # Gzipping Content
	gzip on;
	gzip_proxied any;
        gzip_min_length  1000;
	gzip_comp_level 3;
        gzip_buffers     4 4k;
        gzip_types       application/x-javascript text/css application/javascript text/javascript text/plain text/xml application/json application/vnd.ms-fontobject application/x-font-opentype application/x-font-truetype application/x-font-ttf application/xml font/eot font/opentype font/otf image/svg+xml image/vnd.microsoft.icon;
        gzip_disable "MSIE [1-6]\.";

	##
	# Logging Settings
	##
	access_log /var/log/nginx/access.log;
	## [ debug | info | notice | warn | error | crit | alert | emerg ] 
	error_log /var/log/nginx/error.log warn;
	log_format main      '$remote_addr - $remote_user [$time_local]  '
		'"$request" $status $bytes_sent '
		'"$http_referer" "$http_user_agent" '
		'"$gzip_ratio"';
	log_format download  '$remote_addr - $remote_user [$time_local]  '
		'"$request" $status $bytes_sent '
		'"$http_referer" "$http_user_agent" '
		'"$http_range" "$sent_http_content_range"';

	#-->Lua install -- lua.resty.nginx.weedfs
	#lua_package_path "/usr/local/openresty/lualib/?.lua;;";
  	#resolver 8.8.8.8;

	include /etc/nginx/mime.types;
	default_type application/octet-stream;
	#--> Security naxsi filter
	#include /etc/nginx/naxsi_core.rules;

	#-->Security
	add_header X-Frame-Options SAMEORIGIN;
	add_header X-Content-Type-Options nosniff;
	add_header X-XSS-Protection "1; mode=block";
	# with Content Security Policy (CSP) enabled(and a browser that supports it(http://caniuse.com/#feat=contentsecuritypolicy),
	# you can tell the browser that it can only download content from the domains you explicitly allow
	# http://www.html5rocks.com/en/tutorials/security/content-security-policy/
	# https://www.owasp.org/index.php/Content_Security_Policy
	# I need to change our application code so we can increase security by disabling 'unsafe-inline' 'unsafe-eval'
	# directives for css and js(if you have inline css or js, you will need to keep it too).
	# more: http://www.html5rocks.com/en/tutorials/security/content-security-policy/#inline-code-considered-harmful
	# add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://ssl.google-analytics.com https://assets.zendesk.com https://connect.facebook.net; img-src 'self' https://ssl.google-analytics.com https://s-static.ak.facebook.com https://assets.zendesk.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com https://assets.zendesk.com; font-src 'self' https://themes.googleusercontent.com; frame-src https://assets.zendesk.com https://www.facebook.com https://s-static.ak.facebook.com https://tautt.zendesk.com; object-src 'none'";
	
	##
	# Virtual Host Configs
	##
	include /etc/nginx/conf.d/*.conf;
        include /etc/nginx/sites-enabled/*;
}

{% if nginx_official_repo_mainline %}
stream {

{% for v in nginx_stream_params %}
        {{ v }};
{% endfor %}

        include {{ nginx_conf_dir }}/conf.d/stream/*.conf;
}
{% endif %}

{% if nginx_daemon_mode == "off" %}
daemon off;
{% endif %}
